package main

import (
	"fmt"
	"os"
	"path/filepath"
	//"github.com/tastybug/hookworm/internal/hookworm"
)

const (
	hookScriptContent = `#!/bin/sh
# Generated by hookworm
hookworm run
`
)

func main() {

	// Check if a command is provided
	if len(os.Args) < 2 {
		printUsage()
		os.Exit(1)
	}

	command := os.Args[1]

	switch command {
	case "install":
		if err := installHook(); err != nil {
			fmt.Fprintf(os.Stderr, "Error installing hook: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("Hookworm installed successfully")
	case "run":
		// Placeholder for hook execution; always return 0 for now
		fmt.Println("Nothing done right now.")
		os.Exit(0)
	default:
		printUsage()
		os.Exit(1)
	}
}

// installHook adds hookworm to the .git/hooks/pre-commit file
func installHook() error {
	// Find the .git directory
	gitDir, err := findGitDir()
	if err != nil {
		return fmt.Errorf("finding .git directory: %v", err)
	}

	// Define the hook file path
	hookPath := filepath.Join(gitDir, "hooks", "pre-commit")

	// Write the hook script
	err = os.WriteFile(hookPath, []byte(hookScriptContent), 0755)
	if err != nil {
		return fmt.Errorf("writing hook file: %v", err)
	}

	// Ensure the hook is executable
	err = os.Chmod(hookPath, 0755)
	if err != nil {
		return fmt.Errorf("setting hook permissions: %v", err)
	}

	return nil
}

// findGitDir locates the .git directory in the current or parent directories
func findGitDir() (string, error) {
	dir, err := os.Getwd()
	if err != nil {
		return "", err
	}

	for {
		gitDir := filepath.Join(dir, ".git")
		if stat, err := os.Stat(gitDir); err == nil && stat.IsDir() {
			return gitDir, nil
		}

		// Move up one directory
		parent := filepath.Dir(dir)
		if parent == dir {
			return "", fmt.Errorf("no .git directory found")
		}
		dir = parent
	}
}

// printUsage displays the command-line usage
func printUsage() {
	fmt.Println("Usage: hookworm <command>")
	fmt.Println("Commands:")
	fmt.Println("  install  Install hookworm as a Git pre-commit hook")
	fmt.Println("  run      Run the hookworm checks (called by Git)")
}
